name: ECS Continuous Integration
run-name: ${{ github.actor }} is running Continuous Integration on GitHub Actions 🚀
on: [push]
env: 
  ECR_ENDPOINT: 255945442255.dkr.ecr.us-east-1.amazonaws.com
jobs:
  install-dependencies:
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository code
        uses: actions/checkout@v4
      - name: Run installation of dependencies commands
        run: npm install

  code-unit-testing:
    runs-on: ubuntu-latest
    needs: install-dependencies
    outputs:
      status: ${{ job.status }}
    steps:
      - name: Check out repository code
        uses: actions/checkout@v4

      - name: Run installation of dependencies commands
        run: npm install

      - name: Run unit testing command
        run: |
          npm test

  code-ql-scanning:
    name: Analyze (${{ matrix.language }})
    # Runner size impacts CodeQL analysis time. To learn more, please see:
    #   - https://gh.io/recommended-hardware-resources-for-running-codeql
    #   - https://gh.io/supported-runners-and-hardware-resources
    #   - https://gh.io/using-larger-runners (GitHub.com only)
    # Consider using larger runners or machines with greater resources for possible analysis time improvements.
    runs-on: ${{ (matrix.language == 'swift' && 'macos-latest') || 'ubuntu-latest' }}
    timeout-minutes: ${{ (matrix.language == 'swift' && 120) || 360 }}
    permissions:
      # required for all workflows
      security-events: write

      # required to fetch internal or private CodeQL packs
      packages: read

      # only required for workflows in private repositories
      actions: read
      contents: read

    strategy:
      fail-fast: false
      matrix:
        include:
        - language: javascript-typescript
          build-mode: none
        # CodeQL supports the following values keywords for 'language': 'c-cpp', 'csharp', 'go', 'java-kotlin', 'javascript-typescript', 'python', 'ruby', 'swift'
        # Use `c-cpp` to analyze code written in C, C++ or both
        # Use 'java-kotlin' to analyze code written in Java, Kotlin or both
        # Use 'javascript-typescript' to analyze code written in JavaScript, TypeScript or both
        # To learn more about changing the languages that are analyzed or customizing the build mode for your analysis,
        # see https://docs.github.com/en/code-security/code-scanning/creating-an-advanced-setup-for-code-scanning/customizing-your-advanced-setup-for-code-scanning.
        # If you are analyzing a compiled language, you can modify the 'build-mode' for that language to customize how
        # your codebase is analyzed, see https://docs.github.com/en/code-security/code-scanning/creating-an-advanced-setup-for-code-scanning/codeql-code-scanning-for-compiled-languages
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    # Initializes the CodeQL tools for scanning.
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: ${{ matrix.language }}
        build-mode: ${{ matrix.build-mode }}
        # If you wish to specify custom queries, you can do so here or in a config file.
        # By default, queries listed here will override any specified in a config file.
        # Prefix the list here with "+" to use these queries and those in the config file.

        # For more details on CodeQL's query packs, refer to: https://docs.github.com/en/code-security/code-scanning/automatically-scanning-your-code-for-vulnerabilities-and-errors/configuring-code-scanning#using-queries-in-ql-packs
        # queries: security-extended,security-and-quality

    # If the analyze step fails for one of the languages you are analyzing with
    # "We were unable to automatically build your code", modify the matrix above
    # to set the build mode to "manual" for that language. Then modify this step
    # to build your code.
    # ℹ️ Command-line programs to run using the OS shell.
    # 📚 See https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#jobsjob_idstepsrun
    - if: matrix.build-mode == 'manual'
      shell: bash
      run: |
        echo 'If you are using a "manual" build mode for one or more of the' \
          'languages you are analyzing, replace this with the commands to build' \
          'your code, for example:'
        echo '  make bootstrap'
        echo '  make release'
        exit 1

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3
      with:
        category: "/language:${{matrix.language}}"

  code-vulnerability-scanning:
    runs-on: ubuntu-latest
    needs: install-dependencies
    outputs:
      status: ${{ job.status }}
    steps:
      - name: Check out repository code
        uses: actions/checkout@v4

      - name: Install Snyk CLI
        run: npm install -g snyk

      - name: Run Snyk to check for vulnerabilities
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        run: | 
          snyk test --severity-threshold=high
          snyk test --severity-threshold=high --json > snyk-results.json

      - name: Upload Snyk Scan Results
        uses: actions/upload-artifact@v3
        with:
          name: snyk-scan-results
          path: snyk-results.json

  iac-vulnerability-scanning:
    runs-on: ubuntu-latest
    needs: install-dependencies
    outputs:
      status: ${{ job.status }}
    steps:
      - name: Check out repository code
        uses: actions/checkout@v4
      - name: Install Snyk CLI
        run: npm install -g snyk
      - name: Run Snyk Code Scan And Check Snyk Scan Results
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        run: |
          snyk iac test --severity-threshold=high
          snyk iac test --severity-threshold=high --json > snyk_iac_report.json
      - name: Upload Snyk IaC Report
        uses: actions/upload-artifact@v3
        with:
          name: snyk-iac-report
          path: snyk_iac_report.json

  build-and-scan-image:
    runs-on: ubuntu-latest
    needs: [code-unit-testing, code-vulnerability-scanning, iac-vulnerability-scanning]
    steps:
      - name: Check out repository code
        uses: actions/checkout@v4
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
            aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
            aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            aws-region: us-east-1
      - name: Login to ECR
        run: aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin ${{ env.ECR_ENDPOINT }}
      - name: Docker build and tag
        run: |
            docker build -t ${{ vars.IMAGE_NAME }} .
            docker tag ${{ vars.IMAGE_NAME }}:latest ${{ env.ECR_ENDPOINT }}/${{ vars.IMAGE_NAME }}:latest
      - name: Run image scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: '${{ vars.IMAGE_NAME }}:latest'
          format: 'table'
          # exit-code: '1'
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'MEDIUM,HIGH,CRITICAL'
          output: 'docker-image-scan.json'
      - name: Upload Docker Trivy Report
        uses: actions/upload-artifact@v3
        with:
          name: docker-image-scan
          path: docker-image-scan.json
      - name: Docker publish to ECR
        run: docker push ${{ env.ECR_ENDPOINT }}/${{ vars.IMAGE_NAME }}:latest

  deploy-image-dev:
    needs: [build-and-scan-image]
    name: "Deployed image to dev"
    uses: luqmannnn/ci-cd-container/.github/workflows/cd.yml@main
    with:
        target_env: "dev"
        action: "deploy"
    secrets: inherit
    if: ${{ github.ref_name == 'main' || github.ref_name == 'develop' || startsWith(github.ref_name, 'feature/') }}

  deploy-image-uat:
    needs: [build-and-scan-image]
    name: "Deployed image to uat"
    uses: luqmannnn/ci-cd-container/.github/workflows/cd.yml@main
    with:
        target_env: "uat"
        action: "deploy"
    secrets: inherit
    if: ${{ startsWith(github.ref_name, 'release/') }}

  deploy-image-prod:
    needs: [build-and-scan-image, deploy-image-uat]
    name: "Deployed image to prod"
    uses: luqmannnn/ci-cd-container/.github/workflows/cd.yml@main
    with:
        target_env: "prod"
        action: "deploy"
    secrets: inherit
    if: ${{ startsWith(github.ref_name, 'release/') }}

  build_summary:
    needs: [code-unit-testing, code-vulnerability-scanning, iac-vulnerability-scanning]
    runs-on: ubuntu-latest
    steps:
      - name: Adding markdown
        run: |
          CODE_UNIT_STATUS=${{ needs.code-unit-testing.outputs.status }}
          CODE_SCAN_STATUS=${{ needs.code-vulnerability-scanning.outputs.status }}
          IAC_SCAN_STATUS=${{ needs.iac-vulnerability-scanning.outputs.status }}

          echo '## 🚀 Preparing Build Summary 🚀' >> $GITHUB_STEP_SUMMARY
          echo '' >> $GITHUB_STEP_SUMMARY

          echo "| Job Name        | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| code-scan       | $CODE_SCAN_STATUS |" >> $GITHUB_STEP_SUMMARY
          echo "| iac-scan        | $IAC_SCAN_STATUS  |" >> $GITHUB_STEP_SUMMARY
          echo "| unit-scan       | $CODE_UNIT_STATUS |" >> $GITHUB_STEP_SUMMARY
          